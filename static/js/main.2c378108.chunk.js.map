{"version":3,"sources":["components/Buttons/Button/Button.js","components/Buttons/Buttons.js","components/Labels/Labels.js","components/Timer/Timer.js","containers/Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","console","log","onClick","click","id","className","class","React","memo","playState","play","reset","prevProps","nextProps","breakLength","sessionLength","countersHandler","value","Timer","sessionTimer","timerState","minutes","seconds","defaultState","timer","setssionTimer","Pomodoro","state","timerInterval","checkStateValue","val","op","setStateHandler","stateType","operation","setState","prevState","newLength","newTimer","type","resetTimerHandler","clearInterval","startTimerHandler","togglePlay","setInterval","audioBeep","playAudio","this","preload","ref","audio","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c378108.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Button.css\";\r\n\r\nfunction Button(props) {\r\n    console.log(\"button render\")\r\n    return (\r\n    <button  onClick={props.click} id={props.id}><i className={props.class}\r\n     ></i></button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button/Button';\r\n\r\nfunction Buttons(props) {\r\n    return (\r\n        <div className=\"Buttons\">\r\n            <Button id=\"start_stop\" class={props.playState ? \"fa fa-play stoped\": \"fa fa-play\"} click={props.play}\r\n            />\r\n            <Button id=\"pause\" class={!props.playState ? \"fa fa-pause stoped\": \"fa fa-pause\"} click={props.play} />\r\n            <Button id=\"reset\"  class=\"fa fa-repeat\" click={props.reset}/>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Buttons, (prevProps, nextProps) => {\r\n    if(prevProps.playState !== nextProps.playState){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n});","import React from 'react';\r\nimport Button from '../Buttons/Button/Button';\r\nimport \"./Labels.css\";\r\n\r\nfunction Labels({ breakLength, sessionLength, countersHandler }) {\r\n    return (\r\n        <div className=\"labels\">\r\n            <div className=\"label-section\">\r\n                <label id=\"break-label\">Break Length</label>\r\n                <div>\r\n                    <Button value=\"Down\" class=\"fa fa-arrow-down\" id=\"break-decrement\" click={() => countersHandler(\"break\", \"dec\")}/>\r\n                    <p id=\"break-length\">{breakLength}</p>\r\n                    <Button value=\"Up\" class=\"fa fa-arrow-up\" id=\"break-increment\" \r\n                    click={() => countersHandler(\"break\", \"inc\")}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"label-section\">\r\n                <label id=\"session-label\">Session Length</label>\r\n                <div>\r\n                    <Button value=\"Down\" class=\"fa fa-arrow-down\" id=\"session-decrement\"\r\n                    click={() => countersHandler(\"session\", \"dec\")}/>\r\n                    <p id=\"session-length\">{sessionLength}</p>\r\n                    <Button value=\"Up\" class=\"fa fa-arrow-up\" id=\"session-increment\"\r\n                    click={() => countersHandler(\"session\", \"inc\")}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Labels , (prevProps, nextProps) => {\r\n    if(prevProps.breakLength !== nextProps.breakLength || prevProps.sessionLength !== nextProps.sessionLength){\r\n        return false\r\n    }else{\r\n        return true\r\n    }\r\n});","import React from 'react';\r\nimport \"./Timer.css\";\r\nfunction Timer(props) {\r\n    return (\r\n        <div id=\"timer\">\r\n            <label id=\"timer-label\">{props.sessionTimer ? \"Session\" :\"Break\"}</label>\r\n            <div id=\"time-left\">{props.timerState.minutes + \":\" + (props.timerState.seconds < 10 ? \"0\" + props.timerState.seconds : props.timerState.seconds)}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport Buttons from '../components/Buttons/Buttons';\r\nimport Labels from '../components/Labels/Labels';\r\nimport Timer from '../components/Timer/Timer';\r\nimport \"./Pomodoro.css\";\r\nconst defaultState = {\r\n    sessionLength: 25,\r\n    breakLength: 5,\r\n    timer: {\r\n        minutes: 25,\r\n        seconds: 0\r\n    }\r\n    ,\r\n    play : false,\r\n    setssionTimer: true,\r\n    \r\n}\r\nclass Pomodoro extends Component {\r\n    state = {\r\n        sessionLength : 25,\r\n        breakLength: 5,\r\n        timer: {\r\n            minutes: 25,\r\n            seconds: 0\r\n        },\r\n        play : false,\r\n        sessionTimer: true,\r\n    }\r\n\r\n    timerInterval = 0;\r\n\r\n    checkStateValue = (val, op) => {\r\n        // i cannot set the break/session length less than 1 and more than 60\r\n        if(val === 1 && op === \"dec\"){\r\n            return false\r\n        }else if(val === 60 && op === \"inc\"){\r\n            return false\r\n        }else{\r\n            return true\r\n        }\r\n        \r\n    }\r\n\r\n    setStateHandler = (stateType, operation) => {\r\n        this.setState(prevState => {\r\n            if(!this.checkStateValue(prevState[stateType], operation)){\r\n                return prevState\r\n            }\r\n           const newLength = operation === \"inc\" ? prevState[stateType] + 1 : prevState[stateType] - 1;\r\n        //    new Timer , if the current timer is on session, and i update break, timer should \r\n        // not be modified\r\n        // if current timer is on session and i update session length , timer should be updated\r\n        // same thing goes for session\r\n           const newTimer = prevState.sessionTimer && stateType === \"sessionLength\" ? \r\n           {minutes: newLength, seconds: 0} : !prevState.sessionTimer && stateType === \"breakLength\" ? \r\n           {minutes : newLength, seconds : 0} : {minutes: prevState.timer.minutes, seconds : prevState.timer.seconds};\r\n            return{\r\n                [stateType]: newLength,\r\n                timer:newTimer\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    countersHandler = (type, operation) => {\r\n        if(this.state.play){ // if the timer is running , i cant update session or break values\r\n            \r\n            return\r\n        }\r\n        if(type === \"session\"){\r\n            this.setStateHandler(\"sessionLength\", operation)\r\n        }else{\r\n            this.setStateHandler(\"breakLength\", operation);\r\n        }\r\n    }\r\n\r\n    resetTimerHandler = () => {\r\n        this.setState(defaultState)\r\n        clearInterval(this.timerInterval)\r\n    }\r\n\r\n    startTimerHandler = () => {\r\n        const togglePlay = !this.state.play;\r\n        this.setState({play: togglePlay}); \r\n\r\n                const setTime = () => {\r\n                    this.setState(prevState => {\r\n                        if(prevState.timer.minutes === 0  && prevState.timer.seconds === 0){\r\n                            this.audioBeep.play();\r\n                            return{\r\n                                sessionTimer: !prevState.sessionTimer,\r\n                                timer:{\r\n                                    minutes: !prevState.sessionTimer ? prevState.sessionLength : prevState.breakLength,\r\n                                    seconds: 0\r\n                                },\r\n                                playAudio: true\r\n                            }\r\n                            \r\n                        }\r\n                        else if(prevState.timer.seconds === 0){\r\n                            return{\r\n                                timer : {\r\n                                    minutes: prevState.timer.minutes - 1 ,\r\n                                    seconds: 59\r\n                                }\r\n                            }\r\n                        }else{\r\n                            return{\r\n                                timer : {\r\n                                    minutes: prevState.timer.minutes ,\r\n                                    seconds: prevState.timer.seconds - 1\r\n                                }\r\n                            }\r\n                    }\r\n                    })\r\n                }               \r\n                if(togglePlay){\r\n                    this.timerInterval = setInterval(setTime, 1000);\r\n                }else{\r\n                  clearInterval(this.timerInterval);\r\n                }\r\n                \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Pomodoro\">\r\n                <h1>25 + 5 Clock</h1>\r\n                <Labels breakLength={this.state.breakLength} sessionLength={this.state.sessionLength}\r\n                countersHandler={this.countersHandler} />\r\n                <Timer timerState={this.state.timer} sessionTimer={this.state.sessionTimer} \r\n                />\r\n                <Buttons play={this.startTimerHandler} reset={this.resetTimerHandler} playState={this.state.play}/>\r\n                <audio\r\n                    id=\"beep\"\r\n                    preload=\"auto\"\r\n                    ref={(audio) => {\r\n                        this.audioBeep = audio;\r\n                    }}\r\n                    src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pomodoro;","import React from 'react';\nimport './App.css';\nimport Pomodoro from './containers/Pomodoro';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pomodoro />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}